<style>
.graphic {
  background-color: #EEE;
  margin:auto;
  display: block;
  border-radius: 1em;
}

.node circle {
  fill: #999;
}

.node text {
  font: 10px sans-serif;
}

.node--internal circle {
  fill: #555;
}

.node--internal text {
  text-shadow: 0 1px 0 #fff, 0 -1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff;
}

.link {
  fill: none;
  stroke: #555;
  stroke-opacity: 0.4;
  stroke-width: 1.5px;
}

</style>
<svg class="graphic" width="1060" height="1060"></svg>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script>

var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height"),
    // Radial
    g = svg.append("g").attr("transform", "translate(" + (width / 2 + 40) + "," + (height / 2 + 90) + ")");
    // Non Radial
    // g = svg.append("g").attr("transform", "translate(100,0)");

var stratify = d3.stratify()
    .parentId(function(d) { return d.id.substring(0, d.id.lastIndexOf(".")); });

// Radial
var tree = d3.tree()
    .size([2 * Math.PI, 600])
    .separation(function(a, b) { return (a.parent == b.parent ? 1 : 2) / a.depth; });

// Non Radial
// var tree = d3.tree()
//     .size([height, width - 160]);


function loadRadialTree(releases) {
  console.log("Loading the Radial Tree.");
  console.log(releases);

  var root = "Company";
  var data = [{id:root}];
  var facilities = [];
  for(var i = 0; i < releases.length; i++) {
    var release = releases[i];

    // check if the facility has been seen already
    var present = false;
    for(var j = 0; j < facilities.length; j++) {
      if(release.facility.name === facilities[j]) {
        present =  true;
      }
    }

    // add a new level to the tree if this is a new facility
    if(!present) {
      data.push({id: root + "." + release.facility.name});
      facilities.push(release.facility.name);
    }

    // add this release to the tree
    data.push({id: root + "." + release.facility.name + "." + release.year});
  }

  //d3.csv("flare.csv",
  function populate(error, data) {
    if (error) throw error;

    var root = stratify(data)
        .sort(function(a, b) { return (a.height - b.height) || a.id.localeCompare(b.id); });
    // Non Radial
    // var link = g.selectAll(".link")
    //   .data(tree(root).links())
    //   .enter().append("path")
    //     .attr("class", "link")
    //     .attr("d", d3.linkHorizontal()
    //         .x(function(d) { return d.y; })
    //         .y(function(d) { return d.x; }));
    //
    // var node = g.selectAll(".node")
    //   .data(root.descendants())
    //   .enter().append("g")
    //     .attr("class", function(d) { return "node" + (d.children ? " node--internal" : " node--leaf"); })
    //     .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
    //
    // node.append("circle")
    //     .attr("r", 2.5);
    //
    // node.append("text")
    //     .attr("dy", 3)
    //     .attr("x", function(d) { return d.children ? -8 : 8; })
    //     .style("text-anchor", function(d) { return d.children ? "end" : "start"; })
    //     .text(function(d) { return d.id.substring(d.id.lastIndexOf(".") + 1); });

    var root = tree(stratify(data));

    // Radial
    var link = g.selectAll(".link")
      .data(root.links())
      .enter().append("path")
        .attr("class", "link")
        .attr("d", d3.linkRadial()
            .angle(function(d) { return d.x; })
            .radius(function(d) { return d.y; }));

    var node = g.selectAll(".node")
      .data(root.descendants())
      .enter().append("g")
        .attr("class", function(d) { return "node" + (d.children ? " node--internal" : " node--leaf"); })
        .attr("transform", function(d) { return "translate(" + radialPoint(d.x, d.y) + ")"; });

    node.append("circle")
        .attr("r", 2.5);

    node.append("text")
        .attr("dy", "0.31em")
        .attr("x", function(d) { return d.x < Math.PI === !d.children ? 6 : -6; })
        .attr("text-anchor", function(d) { return d.x < Math.PI === !d.children ? "start" : "end"; })
        .attr("transform", function(d) { return "rotate(" + (d.x < Math.PI ? d.x - Math.PI / 2 : d.x + Math.PI / 2) * 180 / Math.PI + ")"; })
        .text(function(d) { return d.id.substring(d.id.lastIndexOf(".") + 1); });

  };
  populate(undefined, data)
}

function radialPoint(x, y) {
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
}

</script>
